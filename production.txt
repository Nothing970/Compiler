S->Start
Start->M0 MainDef
Start->M0 FuncList MainDef
Start->M0 DeclareS Start
M0->@
MainDef->INT MAIN M1 ( ParaList ) { Sen M3 RETURN Expr ; }
M1->@
FuncList->FuncList FuncDef
FuncList->FuncDef
FuncDef->Type ID M2 ( ParaList ) { Sen M3 RETURN Expr ; }
M2->@
ParaList->@
ParaList->Type ID
ParaList->Type ID , ParaList1
ParaList1->Type ID
ParaList1->Type ID , ParaList1
Sen->DeclareS Sen
Sen->AssignS Sen
Sen->CallS Sen
Sen->IfS M3 Sen
Sen->WhileS M3 Sen
Sen->@
CallS->ID C1 ( CallParaList ) ;
C1->@
CallParaList->@
CallParaList->Expr
CallParaList->Expr , CallParaList1
CallParaList1->Expr
CallParaList1->Expr , CallParaList1
DeclareS->Type Idlist ;
Idlist->Id1
Idlist->Id2
Idlist->Id1 , Idlist
Idlist->Id2 , Idlist
Id1->ID
Id2->ID [ INTCONST ]
AssignS->ID = Expr ;
AssignS->ID [ Expr ] = Expr ;
Expr->Expr + Expr1
Expr->Expr - Expr1
Expr->Expr1
Expr1->Expr1 * Expr2
Expr1->Expr1 / Expr2
Expr1->Expr2
Expr2->( Expr )
Expr2->ID
Expr2->INTCONST
Expr2->STRINGCONST
Expr2->REALCONST
Expr2->CHARCONST
Expr2->ID [ Expr ]
Expr2->ID C1 ( CallParaList )
BoolE->BoolE1
BoolE->BoolE || M3 BoolE1
BoolE1->BoolE2
BoolE1->BoolE1 && M3 BoolE2
BoolE2->BoolE3
BoolE2->! BoolE3
BoolE3->( BoolE )
BoolE3->Expr Condop Expr
M3->@
IfS->IF ( BoolE ) M3 { IfSen }
IfS->IF ( BoolE ) M3 { IfSen } N1 ELSE M3 { IfSen }
IfS->IF ( BoolE ) M3 { IfSen } N1 ELSE M3 IfS
N1->@
IfSen->Sen
IfSen->Sen M3 RETURN Expr ;
WhileS->WHILE M4 ( BoolE ) M3 { CirSen }
M4->@
CirSen->DeclareS CirSen
CirSen->AssignS CirSen
CirSen->CirIfS M3 CirSen
CirSen->WhileS M3 CirSen
CirSen->CallS CirSen
CirSen->@
CirSen->RETURN Expr ;
CirSen->BREAK ;
CirSen->CONTINUE ;
CirIfS->IF ( BoolE ) M3 { CirSen }
CirIfS->IF ( BoolE ) M3 { CirSen } N1 ELSE M3 { CirSen }
CirIfS->IF ( BoolE ) M3 { CirSen } N1 ELSE M3 CirIfS
Condop->>
Condop->>=
Condop-><
Condop-><=
Condop->==
Condop->!=
Type->INT
Type->FLOAT
Type->CHAR