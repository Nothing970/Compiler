Start FuncList FuncDef ParaList ParaList1 Sen CallParaList CallParaList1 DeclareS AssignS IfS IfSen WhileS Idlist Id1 Id2 Id3 Expr Expr1 Expr2 BoolE BoolE1 BoolE2 BoolE3 CondE Condop Const Type CirIfS CirSen
BREAK CONTINUE RETURN ID IF ELSE WHILE INTCONST STRINGCONST REALCONST CHARCONST INT FLOAT STRING CHAR + - * / ( ) [ ] { } || && ! > >= < <= = == != , ;

Start->FuncList
FuncList->FuncDef FuncList
FuncList->@
FuncDef->Type ID ( ParaList ) { Sen RETURN Expr ; }
ParaList->@
ParaList->Type ID
ParaList->Type ID , ParaList1
ParaList1->Type ID
ParaList1->Type ID , ParaList1
Sen->DeclareS Sen
Sen->AssignS Sen
Sen->IfS Sen
Sen->WhileS Sen
Sen->ID ( CallParaList ) ; Sen
Sen->@
CallParaList->@
CallParaList->ID
CallParaList->ID , CallParaList1
CallParaList1->ID
CallParaList1->ID , CallParaList1
DeclareS->Type Idlist ;
Idlist->Id1
Idlist->Id2
Idlist->Id3
Idlist->Id1 , Idlist
Idlist->Id2 , Idlist
Idlist->Id3 , Idlist
Id1->ID
Id2->ID = Expr
Id3->ID [ INTCONST ]
AssignS->ID = Expr ;
Expr->Expr + Expr1
Expr->Expr - Expr1
Expr->Expr1
Expr1->Expr1 * Expr2
Expr1->Expr1 / Expr2
Expr1->Expr2
Expr2->( Expr )
Expr2->ID
Expr2->Const
Expr2->ID [ Expr ]
BoolE->BoolE1
BoolE->BoolE || BoolE1
BoolE1->BoolE2
BoolE1->BoolE1 && BoolE2
BoolE2->BoolE3
BoolE2->! BoolE3
BoolE3->( BoolE )
BoolE3->CondE
CondE->Expr Condop Expr
IfS->IF ( BoolE ) { IfSen }
IfS->IF ( BoolE ) { IfSen } ELSE { IfSen }
IfS->IF ( BoolE ) { IfSen } ELSE IfS
IfSen->Sen
IfSen->Sen RETURN Expr ;
WhileS->WHILE ( BoolE ) { CirSen }
CirSen->DeclareS CirSen
CirSen->AssignS CirSen
CirSen->CirIfS CirSen
CirSen->WhileS CirSen
CirSen->RETURN Expr ;
CirSen->BREAK ;
CirSen->CONTINUE ;
CirSen->ID ( CallParaList ) ; CirSen
CirSen->@
CirIfS->IF ( BoolE ) { CirSen }
CirIfS->IF ( BoolE ) { CirSen } ELSE { CirSen }
CirIfS->IF ( BoolE ) { CirSen } ELSE CirIfS
Condop->>
Condop->>=
Condop-><
Condop-><=
Condop->=
Condop->==
Condop->!=
Const->INTCONST
Const->STRINGCONST
Const->REALCONST
Const->CHARCONST
Type->INT
Type->FLOAT
Type->STRING
Type->CHAR